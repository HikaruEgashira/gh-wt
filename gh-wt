#!/usr/bin/env bash
set -e

# Function to find the git repository root
get_current_repo() {
    local current_dir="$(pwd)"
    local ghq_root="$HOME/ghq/github.com"
    
    # Check if current directory is under ghq
    if [[ "$current_dir" == "$ghq_root"* ]]; then
        # Extract repo path (remove ghq_root prefix and get first 2 path components)
        local relative_path="${current_dir#$ghq_root/}"
        local repo_path=$(echo "$relative_path" | cut -d'/' -f1-2)
        echo "$ghq_root/$repo_path"
    fi
}

if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    echo "Usage:"
    echo "  gh wt list          ... List git worktrees in current repository"
    echo "  gh wt add <branch> [path] ... Add a new worktree in current repository"
    echo "  gh wt remove        ... Remove a worktree in current repository"
    echo "  gh wt -- <command>  ... Search via fzf and run <command> in the selected worktree"
    echo "  gh wt <command>     ... Search via fzf and run <command> with selected worktree as argument"
    exit 0

# gh wt list
elif [ "$1" == "list" ]; then
    if current_repo=$(get_current_repo); then
        echo "Worktrees in current repository ($current_repo):"
        (cd "$current_repo" && git worktree list 2>/dev/null) || echo "No worktrees found"
    else
        echo "Error: Not in a git repository"
        exit 1
    fi

# gh wt add
elif [ "$1" == "add" ]; then
    if [ -z "$2" ]; then
        echo "Error: Branch name is required"
        echo "Usage: gh wt add <branch> [path]"
        exit 1
    fi
    
    if current_repo=$(get_current_repo); then
        selected_dir="$current_repo"
        echo "Using current repository: $selected_dir"
    else
        echo "Error: Not in a git repository"
        exit 1
    fi
    
    branch="$2"
    if [ -n "$3" ]; then
        worktree_path="$3"
    else
        repo_name=$(basename "$selected_dir")
        worktree_path="$selected_dir-$branch"
    fi
    
    echo "Creating worktree for branch '$branch' at '$worktree_path'"
    
    # Check if branch exists locally or remotely
    if (cd "$selected_dir" && git show-ref --verify --quiet refs/heads/"$branch"); then
        # Local branch exists
        (cd "$selected_dir" && git worktree add "$worktree_path" "$branch")
    elif (cd "$selected_dir" && git show-ref --verify --quiet refs/remotes/origin/"$branch"); then
        # Remote branch exists, create local tracking branch
        (cd "$selected_dir" && git worktree add "$worktree_path" -b "$branch" "origin/$branch")
    else
        # Branch doesn't exist, create new branch
        (cd "$selected_dir" && git worktree add "$worktree_path" -b "$branch")
    fi
    echo "Worktree created successfully!"

# gh wt remove
elif [ "$1" == "remove" ] || [ "$1" == "rm" ]; then
    if current_repo=$(get_current_repo); then
        temp_file=$(mktemp)
        echo "Available worktrees in current repository:"
        (cd "$current_repo" && git worktree list --porcelain 2>/dev/null | grep "^worktree " | sed 's/^worktree //' >> "$temp_file") || true
        
        if [ ! -s "$temp_file" ]; then
            echo "No worktrees found"
            rm "$temp_file"
            exit 0
        fi
        
        selected_worktree=$(cat "$temp_file" | fzf --prompt="Select worktree to remove: " || true)
        rm "$temp_file"
        
        if [ -n "$selected_worktree" ]; then
            echo "Removing worktree: $selected_worktree"
            (cd "$current_repo" && git worktree remove "$selected_worktree")
            echo "Worktree removed successfully!"
        fi
    else
        echo "Error: Not in a git repository"
        exit 1
    fi

# gh wt -- <command>
elif [ "$1" == "--" ]; then
    shift  # Remove the "--" from arguments
    if current_repo=$(get_current_repo); then
        temp_file=$(mktemp)
        (cd "$current_repo" && git worktree list --porcelain 2>/dev/null | grep "^worktree " | sed 's/^worktree //' >> "$temp_file") || true
        
        if [ ! -s "$temp_file" ]; then
            echo "No worktrees found"
            rm "$temp_file"
            exit 0
        fi
        
        selected_worktree=$(cat "$temp_file" | fzf --prompt="Select worktree: " || true)
        rm "$temp_file"
        
        if [ -n "$selected_worktree" ]; then
            cd "$selected_worktree"
            exec "$@"
        fi
    else
        echo "Error: Not in a git repository"
        exit 1
    fi

# gh wt <command>
else
    if current_repo=$(get_current_repo); then
        temp_file=$(mktemp)
        (cd "$current_repo" && git worktree list --porcelain 2>/dev/null | grep "^worktree " | sed 's/^worktree //' >> "$temp_file") || true
        
        if [ ! -s "$temp_file" ]; then
            echo "No worktrees found"
            rm "$temp_file"
            exit 0
        fi
        
        selected_worktree=$(cat "$temp_file" | fzf --prompt="Select worktree: " || true)
        rm "$temp_file"
        
        if [ -n "$selected_worktree" ]; then
            exec "$@" "$selected_worktree"
        fi
    else
        echo "Error: Not in a git repository"
        exit 1
    fi
fi
